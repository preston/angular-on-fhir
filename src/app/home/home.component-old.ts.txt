import { Component, OnInit } from '@angular/core';
import { PatientComponent } from '../patient/patient.component';

const { ClientCredentials, ResourceOwnerPassword, AuthorizationCode } = require('simple-oauth2');

import { GraphiteTracerService } from '../services/graphite_tracer.service';
import { context, Span } from '@opentelemetry/api';
import Client from 'fhir-kit-client';
import { environment } from 'src/environments/environment';
import { ActivatedRoute } from '@angular/router';

import { FhirService } from '../services/fhir.service';

@Component({
  selector: 'home',
  templateUrl: 'home.html'
})
export class HomeComponent implements OnInit {

  tab: string = 'reader';

  protected tracer;
  protected code: string | null = null;
  // SMART launch stuff
  public showPatientBanner = false;
  // protected client: Client | undefined;
  isWritable = false;

  constructor(protected tracerService: GraphiteTracerService, protected route: ActivatedRoute, protected fhirService: FhirService) {
    this.tracer = tracerService.tracerProvider.getTracer('angular-on-fhir-tracer');

    this.route.queryParamMap.forEach(n => {
      n.keys.forEach(key => {
        switch (key) {
          case 'iss':
            this.code = n.get(key);
            break;
          default:
            console.log('Warning: Unknown launch key \'' + key + '\' with value \'' + n.get(key) + '\'');
            break;
        }
      })
    });

    console.log("HomeComponent has been initialized.");

  }


  ngOnInit(): void {
    let span = this.tracer.startSpan('home-component-initialization');
    console.log('Initializing home component.');

    this.fhirService.client.smartAuthMetadata().then(meta => {
      // Create a new oAuth2 object using the Client capability statement:
      const oauth2 = ClientCredentials.create({
        client: {
          id: environment.clientId
        },
        auth: {
          tokenHost: `${meta.tokenUrl?.protocol}//${meta.tokenUrl?.host}`,
          tokenPath: meta.tokenUrl?.pathname,
          authorizeHost: `${meta.authorizeUrl?.protocol}//${meta.authorizeUrl?.host}`,
          authorizePath: meta.authorizeUrl?.pathname,
        },
        options: {
          authorizationMethod: 'body',
        },
      });

      const options = {
        code: this.code
        // redirect_uri: 'http://localhost:3000/callback',
      };

      try {
        const result = AuthorizationCode.getToken(options);

        const { token } = oauth2.accessToken.create(result);

        console.log('The token is : ', token);

        this.fhirService.client.bearerToken = token.access_token;

        this.fhirService.client.read({ resourceType: 'Patient', id: token.patient }).then(r => {
          let patient = r;
          console.log(r);
          
        });

      } catch (error) {
        console.error('Access Token Error', error);
      }

      // this.client = client;
      // console.log("ID Token: " + client.getIdToken());

      // console.log(client.getAuthorizationHeader());

      // this.fhirService.client.bearerToken = client.getAuthorizationHeader()!;
      // // this.fhirService.reinitialize(client.getAuthorizationHeader()!);
      // console.log("Configured fhir-kit-client to use bearer token: " + this.fhirService.client.bearerToken);

      // this.showPatientBanner = client.getState('tokenResponse.need_patient_banner');
      // console.log('Show patient banner: ' + this.showPatientBanner);
      // this.setWritableScope(client);
    });
    span.end();
  }

  // setWritableScope(client: Client) {
  //     var writable = false;
  //     var scope: string = client.getState('tokenResponse.scope');
  //     var scopes = scope ? scope.split(" ") : [];
  //     scopes.forEach(value => {
  //       if (value === "patient/*.*" ||
  //         value === "patient/*.write" ||
  //         value === "patient/Observation.write" ||
  //         value === "user/*.write" ||
  //         value === "user/*.*"
  //       ) {
  //         writable = true;
  //       }
  //     });

  //     this.isWritable = writable;
  //     return writable;
  //   }

}
